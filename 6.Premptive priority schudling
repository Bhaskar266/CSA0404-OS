#include <stdio.h>
struct Process {
    int processID;
    int priority;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};
int findHighestPriority(struct Process processes[], int n, int currentTime) {
    int highestPriorityIndex = -1;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
            if (highestPriorityIndex == -1 || processes[i].priority > processes[highestPriorityIndex].priority) {
                highestPriorityIndex = i;
            }
        }
    }

    return highestPriorityIndex;
}
void priorityScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int selectedProcessIndex = findHighestPriority(processes, n, currentTime);

        if (selectedProcessIndex == -1) {
            currentTime++; // No process is ready, move to the next time unit
        } else {
            printf("Executing Process %d at time %d\n", processes[selectedProcessIndex].processID, currentTime);

            // Update remaining time and move to the next time unit
            processes[selectedProcessIndex].remainingTime--;
            currentTime++;

            if (processes[selectedProcessIndex].remainingTime == 0) {
                completedProcesses++;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].processID = i + 1;
        printf("Enter priority for Process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    priorityScheduling(processes, n);
    return 0;
}
